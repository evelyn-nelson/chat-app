// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_group_queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllUserGroups = `-- name: GetAllUserGroups :many
SELECT "id", "user_id", "group_id", "admin", "created_at", "updated_at" FROM user_groups
`

type GetAllUserGroupsRow struct {
	ID        int32            `json:"id"`
	UserID    pgtype.Int4      `json:"user_id"`
	GroupID   pgtype.Int4      `json:"group_id"`
	Admin     bool             `json:"admin"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetAllUserGroups(ctx context.Context) ([]GetAllUserGroupsRow, error) {
	rows, err := q.db.Query(ctx, getAllUserGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUserGroupsRow
	for rows.Next() {
		var i GetAllUserGroupsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.GroupID,
			&i.Admin,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUserGroupsForGroup = `-- name: GetAllUserGroupsForGroup :many
SELECT "id", "user_id", "group_id", "admin", "created_at", "updated_at" FROM user_groups WHERE group_id = $1
`

type GetAllUserGroupsForGroupRow struct {
	ID        int32            `json:"id"`
	UserID    pgtype.Int4      `json:"user_id"`
	GroupID   pgtype.Int4      `json:"group_id"`
	Admin     bool             `json:"admin"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetAllUserGroupsForGroup(ctx context.Context, groupID pgtype.Int4) ([]GetAllUserGroupsForGroupRow, error) {
	rows, err := q.db.Query(ctx, getAllUserGroupsForGroup, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUserGroupsForGroupRow
	for rows.Next() {
		var i GetAllUserGroupsForGroupRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.GroupID,
			&i.Admin,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUserGroupsForUser = `-- name: GetAllUserGroupsForUser :many
SELECT "id", "user_id", "group_id", "admin", "created_at", "updated_at" FROM user_groups WHERE user_id = $1
`

type GetAllUserGroupsForUserRow struct {
	ID        int32            `json:"id"`
	UserID    pgtype.Int4      `json:"user_id"`
	GroupID   pgtype.Int4      `json:"group_id"`
	Admin     bool             `json:"admin"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetAllUserGroupsForUser(ctx context.Context, userID pgtype.Int4) ([]GetAllUserGroupsForUserRow, error) {
	rows, err := q.db.Query(ctx, getAllUserGroupsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUserGroupsForUserRow
	for rows.Next() {
		var i GetAllUserGroupsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.GroupID,
			&i.Admin,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserGroupByGroupIDAndUserID = `-- name: GetUserGroupByGroupIDAndUserID :one
SELECT "id", "user_id", "group_id", "admin", "created_at", "updated_at" FROM user_groups WHERE user_id = $1 AND group_id = $2
`

type GetUserGroupByGroupIDAndUserIDParams struct {
	UserID  pgtype.Int4 `json:"user_id"`
	GroupID pgtype.Int4 `json:"group_id"`
}

type GetUserGroupByGroupIDAndUserIDRow struct {
	ID        int32            `json:"id"`
	UserID    pgtype.Int4      `json:"user_id"`
	GroupID   pgtype.Int4      `json:"group_id"`
	Admin     bool             `json:"admin"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetUserGroupByGroupIDAndUserID(ctx context.Context, arg GetUserGroupByGroupIDAndUserIDParams) (GetUserGroupByGroupIDAndUserIDRow, error) {
	row := q.db.QueryRow(ctx, getUserGroupByGroupIDAndUserID, arg.UserID, arg.GroupID)
	var i GetUserGroupByGroupIDAndUserIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GroupID,
		&i.Admin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserGroupByID = `-- name: GetUserGroupByID :one
SELECT "id", "user_id", "group_id", "admin", "created_at", "updated_at" FROM user_groups WHERE id = $1
`

type GetUserGroupByIDRow struct {
	ID        int32            `json:"id"`
	UserID    pgtype.Int4      `json:"user_id"`
	GroupID   pgtype.Int4      `json:"group_id"`
	Admin     bool             `json:"admin"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetUserGroupByID(ctx context.Context, id int32) (GetUserGroupByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserGroupByID, id)
	var i GetUserGroupByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GroupID,
		&i.Admin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertUserGroup = `-- name: InsertUserGroup :one
INSERT INTO user_groups ("user_id", "group_id", "admin") VALUES ($1, $2, $3) RETURNING id, user_id, group_id, created_at, updated_at, admin
`

type InsertUserGroupParams struct {
	UserID  pgtype.Int4 `json:"user_id"`
	GroupID pgtype.Int4 `json:"group_id"`
	Admin   bool        `json:"admin"`
}

func (q *Queries) InsertUserGroup(ctx context.Context, arg InsertUserGroupParams) (UserGroup, error) {
	row := q.db.QueryRow(ctx, insertUserGroup, arg.UserID, arg.GroupID, arg.Admin)
	var i UserGroup
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GroupID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Admin,
	)
	return i, err
}
