// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllUsers = `-- name: GetAllUsers :many
SELECT "id", "username", "created_at", "updated_at" FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsersInGroup = `-- name: GetAllUsersInGroup :many
SELECT users.id AS user_id, users.username, groups.id AS group_id, groups.name, user_groups.admin, user_groups.created_at
FROM users 
JOIN user_groups ON user_groups.user_id = users.id 
JOIN groups ON groups.id = user_groups.group_id
WHERE groups.id = $1
`

type GetAllUsersInGroupRow struct {
	UserID    int32
	Username  string
	GroupID   int32
	Name      string
	Admin     bool
	CreatedAt pgtype.Timestamp
}

func (q *Queries) GetAllUsersInGroup(ctx context.Context, id int32) ([]GetAllUsersInGroupRow, error) {
	rows, err := q.db.Query(ctx, getAllUsersInGroup, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersInGroupRow
	for rows.Next() {
		var i GetAllUsersInGroupRow
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.GroupID,
			&i.Name,
			&i.Admin,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT "id", "username", "created_at", "updated_at" FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (username) VALUES ($1) RETURNING id, username, created_at, updated_at
`

func (q *Queries) InsertUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, insertUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
