// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: group_reservation_queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const deleteAllGroupReservationsForUser = `-- name: DeleteAllGroupReservationsForUser :exec
DELETE FROM group_reservations
WHERE user_id = $1
`

func (q *Queries) DeleteAllGroupReservationsForUser(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAllGroupReservationsForUser, userID)
	return err
}

const deleteGroupReservation = `-- name: DeleteGroupReservation :exec
DELETE FROM group_reservations
WHERE group_id = $1 AND user_id = $2
`

type DeleteGroupReservationParams struct {
	GroupID uuid.UUID `json:"group_id"`
	UserID  uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteGroupReservation(ctx context.Context, arg DeleteGroupReservationParams) error {
	_, err := q.db.Exec(ctx, deleteGroupReservation, arg.GroupID, arg.UserID)
	return err
}

const getGroupReservation = `-- name: GetGroupReservation :one
SELECT group_id, user_id, created_at FROM group_reservations
WHERE group_id = $1 AND user_id = $2
LIMIT 1
`

type GetGroupReservationParams struct {
	GroupID uuid.UUID `json:"group_id"`
	UserID  uuid.UUID `json:"user_id"`
}

func (q *Queries) GetGroupReservation(ctx context.Context, arg GetGroupReservationParams) (GroupReservation, error) {
	row := q.db.QueryRow(ctx, getGroupReservation, arg.GroupID, arg.UserID)
	var i GroupReservation
	err := row.Scan(&i.GroupID, &i.UserID, &i.CreatedAt)
	return i, err
}

const getGroupReservationsForUser = `-- name: GetGroupReservationsForUser :many
SELECT group_id, user_id, created_at FROM group_reservations
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetGroupReservationsForUser(ctx context.Context, userID uuid.UUID) ([]GroupReservation, error) {
	rows, err := q.db.Query(ctx, getGroupReservationsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupReservation
	for rows.Next() {
		var i GroupReservation
		if err := rows.Scan(&i.GroupID, &i.UserID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const reserveGroup = `-- name: ReserveGroup :one
INSERT INTO group_reservations (
    group_id,
    user_id
) VALUES (
    $1, $2
)
RETURNING group_id, user_id, created_at
`

type ReserveGroupParams struct {
	GroupID uuid.UUID `json:"group_id"`
	UserID  uuid.UUID `json:"user_id"`
}

func (q *Queries) ReserveGroup(ctx context.Context, arg ReserveGroupParams) (GroupReservation, error) {
	row := q.db.QueryRow(ctx, reserveGroup, arg.GroupID, arg.UserID)
	var i GroupReservation
	err := row.Scan(&i.GroupID, &i.UserID, &i.CreatedAt)
	return i, err
}
