// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: message_queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteMessage = `-- name: DeleteMessage :one
DELETE FROM messages
WHERE id = $1 RETURNING id, content, user_id, group_id, created_at, updated_at
`

func (q *Queries) DeleteMessage(ctx context.Context, id int32) (Message, error) {
	row := q.db.QueryRow(ctx, deleteMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.GroupID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllMessages = `-- name: GetAllMessages :many
SELECT id, content, user_id, group_id, created_at, updated_at FROM messages
`

func (q *Queries) GetAllMessages(ctx context.Context) ([]Message, error) {
	rows, err := q.db.Query(ctx, getAllMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.UserID,
			&i.GroupID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessageById = `-- name: GetMessageById :one
SELECT id, content, user_id, group_id, created_at, updated_at FROM messages WHERE id = $1
`

func (q *Queries) GetMessageById(ctx context.Context, id int32) (Message, error) {
	row := q.db.QueryRow(ctx, getMessageById, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.GroupID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRelevantMessages = `-- name: GetRelevantMessages :many
SELECT m.id, m.content, m.user_id, u.username, m.group_id, m.created_at
FROM messages m
JOIN user_groups ug ON ug.group_id = m.group_id AND ug.user_id = $1
JOIN users u ON u.id = ug.user_id
`

type GetRelevantMessagesRow struct {
	ID        int32            `json:"id"`
	Content   string           `json:"content"`
	UserID    pgtype.Int4      `json:"user_id"`
	Username  string           `json:"username"`
	GroupID   pgtype.Int4      `json:"group_id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) GetRelevantMessages(ctx context.Context, userID pgtype.Int4) ([]GetRelevantMessagesRow, error) {
	rows, err := q.db.Query(ctx, getRelevantMessages, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRelevantMessagesRow
	for rows.Next() {
		var i GetRelevantMessagesRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.UserID,
			&i.Username,
			&i.GroupID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMessage = `-- name: InsertMessage :one
INSERT INTO messages ("user_id", "group_id", "content") VALUES ($1,$2,$3) RETURNING id, content, user_id, group_id, created_at, updated_at
`

type InsertMessageParams struct {
	UserID  pgtype.Int4 `json:"user_id"`
	GroupID pgtype.Int4 `json:"group_id"`
	Content string      `json:"content"`
}

func (q *Queries) InsertMessage(ctx context.Context, arg InsertMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, insertMessage, arg.UserID, arg.GroupID, arg.Content)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.GroupID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
