// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type MessageType string

const (
	MessageTypeText    MessageType = "text"
	MessageTypeImage   MessageType = "image"
	MessageTypeControl MessageType = "control"
)

func (e *MessageType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MessageType(s)
	case string:
		*e = MessageType(s)
	default:
		return fmt.Errorf("unsupported scan type for MessageType: %T", src)
	}
	return nil
}

type NullMessageType struct {
	MessageType MessageType `json:"message_type"`
	Valid       bool        `json:"valid"` // Valid is true if MessageType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMessageType) Scan(value interface{}) error {
	if value == nil {
		ns.MessageType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MessageType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMessageType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MessageType), nil
}

type DeviceKey struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
	// Client-generated unique identifier for the device
	DeviceIdentifier string `json:"device_identifier"`
	// Curve25519 public key bytes for E2EE
	PublicKey  []byte           `json:"public_key"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	LastSeenAt pgtype.Timestamp `json:"last_seen_at"`
}

type Group struct {
	ID          uuid.UUID        `json:"id"`
	Name        string           `json:"name"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
	StartTime   pgtype.Timestamp `json:"start_time"`
	EndTime     pgtype.Timestamp `json:"end_time"`
	Description pgtype.Text      `json:"description"`
	Location    pgtype.Text      `json:"location"`
	ImageUrl    pgtype.Text      `json:"image_url"`
	Blurhash    pgtype.Text      `json:"blurhash"`
}

type Message struct {
	ID        uuid.UUID        `json:"id"`
	UserID    *uuid.UUID       `json:"user_id"`
	GroupID   *uuid.UUID       `json:"group_id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
	// Encrypted message content (libsodium secretbox output)
	Ciphertext []byte `json:"ciphertext"`
	// Nonce used for symmetric encryption of the ciphertext
	MsgNonce []byte `json:"msg_nonce"`
	// JSON array of per-recipient sealed symmetric keys. Each element: {deviceId, ephPubKey, keyNonce, sealedKey}
	KeyEnvelopes []byte      `json:"key_envelopes"`
	MessageType  MessageType `json:"message_type"`
}

type User struct {
	ID        uuid.UUID        `json:"id"`
	Username  string           `json:"username"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
	Email     string           `json:"email"`
	Password  pgtype.Text      `json:"password"`
}

type UserGroup struct {
	ID        uuid.UUID        `json:"id"`
	UserID    *uuid.UUID       `json:"user_id"`
	GroupID   *uuid.UUID       `json:"group_id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
	Admin     bool             `json:"admin"`
}
