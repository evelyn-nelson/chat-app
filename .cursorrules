# Cursor Rules for chat-app

[goals]
- Prefer docker-first workflows for server, migrations, and codegen.
- Keep edits safe: never change generated code or platform directories.
- Respect file-based routing conventions in Expo Router and handler patterns in Gin.
- Enforce simple preflight checks: lint and basic build where applicable.

[protected_paths.block_all_edits]
# sqlc generated outputs
- server/db/*_queries.sql.go
- server/db/models.go

# Dependency lock files should not be hand-edited
- server/go.sum
- expo/package-lock.json

# Mobile native/platform outputs (generated by expo prebuild)
- expo/android/**
- expo/ios/**

# Local tool artifacts
- server/tmp/**
- expo/.expo/**

[edit_policies]
# DB changes must go through migrations and sqlc generation
- Do not edit any file matching protected_paths.block_all_edits for any reason.
- For DB schema changes, add new migration files under db/migrations and new queries under db/queries, then regenerate with sqlc via docker.

[commands.docker_first]
# Bring up full stack (Caddy 8080, Postgres, Redis, Go server)
dev-up: docker compose up

# Apply migrations (up) as a one-off container
migrate-up: docker compose run --rm migrate -path /migrations -database "postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME:-postgres}?sslmode=disable" up

# Regenerate sqlc outputs
sqlc-gen: docker compose run --rm sqlc generate -f server/sqlc.yaml

# Tail only Go logs (service name may vary if compose names differ)
logs-go: docker-compose logs -f go-server

[commands.frontend]
# Expo dev
expo-start: cd expo && npx expo start
expo-lint: cd expo && npm run lint
expo-test: cd expo && npm run test

[workflows]
# Add REST endpoint (Go)
- Add SQL in db/queries/*.sql
- Run: commands.docker_first.sqlc-gen
- Implement handler in server/server/*.go (or appropriate package)
- Register route in server/router/router.go
- Run: commands.docker_first.dev-up
- Validate via curl or app; watch logs-go

# Add WebSocket flow (Go + client)
- Define message schema in server/ws/types.go (if needed)
- Implement handler path in server/ws/handler.go or augment hub flow
- Update client message handling in expo/components/context/WebSocketContext.tsx and MessageStoreContext.tsx
- Run: dev-up + expo-start, verify live messages

# Add a migration (DB)
- Create db/migrations/*_*.up.sql and .down.sql
- Run: commands.docker_first.migrate-up
- If new queries are needed, add db/queries/*.sql and run sqlc-gen

# Add image feature
- Use server/images/handler.go presign endpoints
- Use expo/services/imageService.ts and hooks for upload/download
- Ensure size/extension constraints match server/images/handler.go

[style]
- Go: gin handlers with early returns, structured errors, db access via db.Queries only. Keep nesting shallow.
- TS/React Native: use contexts in expo/components/context/* and persistence in expo/store/*. Type strong external APIs. Prefer services/* for network and encryption.
- Never hardcode or log secrets (JWT_SECRET, DB_URL, REDIS_URL, S3_BUCKET).
- Ensure /api, /ws (except initial upgrade), and /images are behind JWT middleware.

[preflight]
- For client-only edits: run commands.frontend.expo-lint and commands.frontend.expo-test where feasible.
- For server/db edits: run commands.docker_first.dev-up and confirm service health via logs.
