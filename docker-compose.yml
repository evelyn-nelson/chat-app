services:
  go-server:
    build:
      context: server
      dockerfile: Dockerfile
    volumes:
      - ./server:/app
      - ~/.aws:/root/.aws:ro
    env_file:
      - ".env"
    environment:
      - AWS_PROFILE=s3-local-637423634719
      - AWS_REGION=us-east-1 # Replace with your S3 bucket's region if different
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      redis_cache:
        condition: service_healthy
    restart: unless-stopped
    # Optional: Define a healthcheck for go-server if Caddy's health_uri is used
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"] # Internal port
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3

  db:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    image: migrate/migrate
    volumes:
      - ./db/migrations:/migrations

    command:
      [
        "-path",
        "/migrations",
        "-database",
        "postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME:-postgres}?sslmode=disable",
        "up",
      ]
      # if migrating down
      # [
      #   "-path",
      #   "/db/migrations",
      #   "-database",
      #   "postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME:-postgres}?sslmode=disable",
      #   "down",
      #   "1",
      # ]
    depends_on:
      db:
        condition: service_healthy # Ensures DB is healthy before running migrations
    restart: on-failure

  sqlc:
    image: sqlc/sqlc
    volumes:
      - ./db:/src/db
      - ./server:/src/server
    working_dir: /src
    command: ["generate", "-f", "server/sqlc.yaml"]
  redis_cache:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    # command: redis-server --save 60 1 --loglevel warning # Optional: Customize Redis startup commands
  caddy:
    image: caddy:2-alpine
    restart: unless-stopped
    ports:
      - "8080:8080" # Map host port 8080 to Caddy's configured listening port (from Caddyfile)
      # - "443:443"    # If you configure Caddy for HTTPS on port 443
      # - "2019:2019"  # Caddy's admin API port (optional, for dynamic config)
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - go-server
    # environment: # Optional: for ACME DNS challenges etc.
    # - ACME_AGREE=true
volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local
